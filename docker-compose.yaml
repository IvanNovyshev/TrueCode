services:


  # gateway
  api-gateway:
    build: ./TrueCode.ApiGateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - Token__Secret=${JWT_SECRET}
      - Token__Issuer=${JWT_ISSUER}
      - Token__Audience=${JWT_AUDIENCE}
    ports:
      - "8080:8080"
    networks:
      - app-network
  
  # finance service
  finance-service:
    build: ./TrueCode.FinanceService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8084
      - ConnectionStrings__FinanceConnection=${Finance_service_connection}
    expose:
      - "8084"
    networks:
      - app-network
  
  # user service
  user-service:
    build: ./TrueCode.UserService
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__UserConnection=${User_service_connection}
      - ASPNETCORE_URLS=http://+:8083
      - Token__Secret=${JWT_SECRET}
      - Token__Issuer=${JWT_ISSUER}
      - Token__Audience=${JWT_AUDIENCE}
      - Token__ExpiredIn=${JWT_EXPIRES_IN}
    expose:
      - "8083"
    networks:
      - app-network
  
  # filler service
  currency-filler-service:
    build: ./TrueCode.CurrencyFillerService
    env_file:
      - .env
    environment:
      - ConnectionStrings__FillerConnection=${Filler_service_connection}
    networks:
      - app-network
  
  
  # filler service
  migration-service:
    build: ./TrueCode.MigrationService
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:8085
      - ConnectionStrings__dbConnection=${Migration_service_connection}
      - Token__Secret=${JWT_SECRET}
      - Token__Issuer=${JWT_ISSUER}
      - Token__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    ports:
      - "8085:8085"
    networks:
      - app-network
  
  # PostgreSQL база данных
  postgres:
    image: postgres:17
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d truecode" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  # pgAdmin для управления БД (опционально)
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
    
networks:
  app-network:
    driver: bridge
  




